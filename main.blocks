<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="u{?zlYN[BRz]?RYBnLZ/">players</variable><variable id=",@9N%JNVI@R,LmtsliTi">p</variable><variable id="45}TZ_.X;Z3]#!#zIy^C">q</variable><variable id="nwEV*OO3ROC(+(PofQwM">r</variable><variable id="0IK5s9r;CAf.j5CxHAP1">patientZero</variable><variable id="u)v`S+ffn`8$LuBdNN*;">state</variable><variable id="k=wMY4%fK^mu~~u}-|@[">master</variable><variable id="A~!zDU0U~BMm35.|naD/">paired</variable><variable id=";Vq5^P62[5jo[H[P?b[0">signal</variable><variable id="#B:ltaRoVL~5f{l34=|/">INCUBATION</variable><variable id="?)8gOBQ+v=BO8?:i:FsF">DEATH</variable><variable id="j5N;q:Ect|0(q=p[(G8o">RSSI</variable><variable id="Z;?j}7}_8!yHBf$ldYSP">TRANSMISSIONPROB</variable><variable id="c~(j13oBAgU[%]WEyI4s">playerIcons</variable><variable id="f6=IO(a)R^j0M;$34oBl">infectedBy</variable><variable id="=!S6wXT$H@9B`mLdk[^3">playerIcon</variable></variables><comment id="r6Bt`ZGtiv@YKL[#3Y_Q" data="2" x="20" y="4233" h="120" w="160">player state</comment><comment id="Jc#07:1|Y`.dC@=K`aJc" data="1" x="225" y="4233" h="120" w="160">master state</comment><comment id="AsODf+0C!-}~8eP%RACr" data="0" x="430" y="4233" h="360" w="480">Infection game

Flash all micro:bits with this script

Press A+B to enter master mode (1 per game)

Wait for players to be paired. The number of paired player will display on screen.
An icon will appear on player's screen.

Press A+B to start the infection game. The master will pick a random
player as patient zero.

A player will transmit the disease if close enough (RSSI)
and with a certain probability (TRANSMISSIONPROB).
During the incudation phase (INCUBATION), the player does not show any sign
of illness. After that phase, the sad face shows up.

The game will automatically stop once all players are dead or healthy. The master can
also press A+B again to stop the game.

Once the game is over, the micro:bit will show the player id (A,B,C...), health and
who infected him.

Icons used in the game:

Pairing: IconNames.Ghost
Paired: IconNames.Happy
Dead: IconNames.Skull
Sick: IconNames.Sad
Incubating: IconNames.Confused
Healthy: IconNames.Happy</comment><block type="pxt-on-start" id="(vKXm*(]Op;,Eq|zCDZn" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="!AG95qVL70DRFCVUvQwQ" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let infectedTime = 0" numlines="1" declaredvars="infectedTime"></mutation><next><block type="typescript_statement" id="bwi|_/mCtZWOJ^xKqSgv" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let paired = false" numlines="1" declaredvars="paired"></mutation><next><block type="typescript_statement" id="I|pv^!hIlW*yvY#-n=[1" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let players: Player[] = []" numlines="1" declaredvars="players"></mutation><next><block type="variables_set" id="y[^xsn4^NWyOf44cRj4G"><field name="VAR" id="#B:ltaRoVL~5f{l34=|/">INCUBATION</field><comment pinned="false" h="80" w="160">time before showing symptoms</comment><data>0</data><value name="VALUE"><shadow type="math_number" id="ekSBqR.V[ZD?FjeMYFQ)"><field name="NUM">20000</field></shadow></value><next><block type="variables_set" id=")!x-eD0mF`a=#T#yG8kr"><field name="VAR" id="?)8gOBQ+v=BO8?:i:FsF">DEATH</field><comment pinned="false" h="80" w="160">time before dying off the disease</comment><value name="VALUE"><shadow type="math_number" id="T7btiZ73G2KyuV9)YJok"><field name="NUM">40000</field></shadow></value><next><block type="variables_set" id="{Ud[(`{;bwySzz2V^wSD"><field name="VAR" id="j5N;q:Ect|0(q=p[(G8o">RSSI</field><comment pinned="false" h="80" w="160">db</comment><value name="VALUE"><shadow type="math_number" id="lTPZ$0AE$M/ZMP$J#zZ{"><field name="NUM">-45</field></shadow></value><next><block type="variables_set" id="XKa@ns5`D:djRp]TXESq"><field name="VAR" id="Z;?j}7}_8!yHBf$ldYSP">TRANSMISSIONPROB</field><comment pinned="false" h="80" w="160">% probability to transfer disease</comment><value name="VALUE"><shadow type="math_number" id="WFV2$9igePSVQ~pR]Jnp"><field name="NUM">40</field></shadow></value><next><block type="typescript_statement" id="gk_Xwl#;u[F|DZht6|$," editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum GameState {" line1="    Stopped," line2="    Pairing," line3="    Infecting," line4="    Running," line5="    Over" line6="}" numlines="7"></mutation><next><block type="typescript_statement" id="D*][.K,Oxd8voaad{w8{" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum HealthState {" line1="    Healthy," line2="    Incubating," line3="    Sick," line4="    Dead" line5="}" numlines="6"></mutation><next><block type="typescript_statement" id="-9P]yt;mU#%P87YCls$%" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum MessageKind {" line1="    PairRequest," line2="    PairConfirmation," line3="    HealthSet," line4="    HealthValue," line5="    InitialInfect," line6="    TransmitVirus," line7="    GameState" line8="}" numlines="9"></mutation><next><block type="typescript_statement" id="res~C-MHd:sOWfLkM|6?" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="const GameIcons = {" line1="    Pairing: IconNames.Ghost," line2="    Paired: IconNames.Happy," line3="    Dead: IconNames.Skull," line4="    Sick: IconNames.Sad," line5="    Incubating: IconNames.Confused," line6="    Healthy: IconNames.Happy" line7="}" numlines="8" declaredvars="GameIcons"></mutation><next><block type="typescript_statement" id="WeQA4n2b8=V$A!1I]L+0" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Message {" line1="" line2="    private _data: Buffer;" line3="" line4="    constructor(input?: Buffer) {" line5="        this._data = input || control.createBuffer(13);" line6="    }" line7="" line8="    get kind(): number {" line9="        return this._data.getNumber(NumberFormat.Int8LE, 0);" line10="    }" line11="" line12="    set kind(x: number) {" line13="        this._data.setNumber(NumberFormat.Int8LE, 0, x);" line14="    }" line15="" line16="    get fromSerialNumber(): number {" line17="        return this._data.getNumber(NumberFormat.Int32LE, 1);" line18="    }" line19="" line20="    set fromSerialNumber(x: number) {" line21="        this._data.setNumber(NumberFormat.Int32LE, 1, x);" line22="    }" line23="" line24="    get value(): number {" line25="        return this._data.getNumber(NumberFormat.Int32LE, 5);" line26="    }" line27="" line28="    set value(x: number) {" line29="        this._data.setNumber(NumberFormat.Int32LE, 5, x);" line30="    }" line31="" line32="    get toSerialNumber(): number {" line33="        return this._data.getNumber(NumberFormat.Int32LE, 9);" line34="    }" line35="" line36="    set toSerialNumber(x: number) {" line37="        this._data.setNumber(NumberFormat.Int32LE, 9, x);" line38="    }" line39="" line40="    send() {" line41="        radio.sendBuffer(this._data);" line42="        basic.pause(250);" line43="    }" line44="}" numlines="45"></mutation><next><block type="variables_set" id="m%[584cKc5)![pB=.WCU"><field name="VAR" id="c~(j13oBAgU[%]WEyI4s">playerIcons</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text" id="5Z1jQ!!C-?^w!Zz5#tu0"><field name="TEXT">ABCDEFGHIJKLMNOPQRSTUVWXYZ</field></block></value><next><block type="typescript_statement" id="xj:Z_y;^Y0_IOUB`z-#O" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Player {" line1="    id: number;" line2="    icon: number;" line3="    health: HealthState;" line4="    show() {" line5="        basic.showString(playerIcons[this.icon]);" line6="    }" line7="}" numlines="8"></mutation><next><block type="typescript_statement" id="bcXeLgUp|;!}Y+D/OMP;" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let state = GameState.Stopped;" numlines="1" declaredvars="state"></mutation><next><block type="typescript_statement" id="QMh,TET.H$G#e_J23h3`" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let patientZero: Player;" numlines="1" declaredvars="patientZero"></mutation><next><block type="variables_set" id="1?B%Uqi~G5:luJ6ZZNyh"><field name="VAR" id="f6=IO(a)R^j0M;$34oBl">infectedBy</field><comment pinned="false" h="80" w="160">who infected (playerIcon)</comment><value name="VALUE"><shadow type="math_number" id="MM]6Ke|pka(jq:@p)6,9"><field name="NUM">-1</field></shadow></value><next><block type="variables_set" id="r_3:%2(u(6Mf2i@Mp%rn"><field name="VAR" id="=!S6wXT$H@9B`mLdk[^3">playerIcon</field><comment pinned="false" h="80" w="160">local time when infection happened
player icon and identity</comment><value name="VALUE"><shadow type="math_number" id="h^vC]*^wyyyUv[lJBUTB"><field name="NUM">-1</field></shadow></value><next><block type="typescript_statement" id="],`[Z?#BFaI2[ap(0hP7" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let health = HealthState.Healthy;" numlines="1" declaredvars="health"></mutation><next><block type="radio_set_group" id="DP%e1z,l:C7FSBSm#^RP"><value name="ID"><shadow type="math_number_minmax" id="N8QM}L!m^UWG0X?goHqx"><mutation min="0" max="255" label="Number" precision="0"></mutation><field name="SLIDER">42</field></shadow></value><next><block type="typescript_statement" id="U}2A+YoK%CuV,7qa5odp" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="basic.showIcon(GameIcons.Pairing)" numlines="1"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="device_button_event" id="Cwur?yp{=C%v_c|9)Shv" x="634" y="20"><field name="NAME">Button.AB</field><statement name="HANDLER"><block type="controls_if" id="fhA/Zm*ar@m$YKuScS1s"><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_operation" id="-NsE~I]|aXsx%Y+Im:h%"><field name="OP">AND</field><value name="A"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="1BsRMJUl1vk;lKI@~dDd"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="h:LdGG9Q|3D0)kqjS7%M"><field name="VAR" id="u)v`S+ffn`8$LuBdNN*;">state</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression" id="xip@yw,Bc)Ykwj=y/NV@" editable="false"><field name="EXPRESSION">GameState.Stopped</field></block></value></block></value><value name="B"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_negate" id="I{M:~9fu05FL00%/6LY~"><value name="BOOL"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="variables_get" id="Cn_e]!}S`/Kyj0|7v-_D"><field name="VAR" id="k=wMY4%fK^mu~~u}-|@[">master</field></block></value></block></value></block></value><statement name="DO0"><block type="variables_set" id="BXrOjdsX?5QmJxs($gsz"><field name="VAR" id="k=wMY4%fK^mu~~u}-|@[">master</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean" id="O3P2Du8i.y9jb{kCoH?M"><field name="BOOL">TRUE</field></block></value><next><block type="variables_set" id="y1kUUYFhP8uQc]`5~],k"><field name="VAR" id="A~!zDU0U~BMm35.|naD/">paired</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean" id="`g8:^MGQ|_AVrHjcel[b"><field name="BOOL">TRUE</field></block></value><next><block type="typescript_statement" id="6k,7*0M:p9D[yZ{T?1w9" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="state = GameState.Pairing;" numlines="1"></mutation><next><block type="serial_writeline" id="/9PVUVe9e^v+8D-35v1;"><value name="text"><shadow type="text" id="o2._{f+gCsmudqeIym_;"><field name="TEXT">registered as master</field></shadow></value><next><block type="radio_set_transmit_power" id="p*)n-bmZ]#%@9|)?F!=3"><value name="power"><shadow type="math_number_minmax" id="Fd^!Kf3iRY()2y)#e?xd"><mutation min="0" max="7" label="Number" precision="0"></mutation><field name="SLIDER">7</field></shadow></value><next><block type="device_print_message" id="~QlWr|J4:c~uE$mf`z+9"><value name="text"><shadow type="text" id="HkC[U^W$[t5L!j95A37D"><field name="TEXT">0</field></shadow></value><next><block type="typescript_statement" id="+mf,R]$%qxyce%GB(%H:" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="return;" numlines="1"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><next><block type="controls_if" id="V^dTLC8gj)kfsmr*8F]$"><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_negate" id="VI;Xe@c=SPrJtmJp{]iP"><value name="BOOL"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="variables_get" id="4-~:^h`t|:29:5EwqW2H"><field name="VAR" id="k=wMY4%fK^mu~~u}-|@[">master</field></block></value></block></value><statement name="DO0"><block type="typescript_statement" id="dj}_*R!mlfAGoa]!hqpF" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="return;" numlines="1"></mutation></block></statement><next><block type="controls_if" id="JYE4)!RhRI8JU_*P-vcR"><mutation elseif="1"></mutation><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="(?GdLKqX^?5q~O)QFG8i"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="aKEGB~a^J?$@_Z/K|_p6"><field name="VAR" id="u)v`S+ffn`8$LuBdNN*;">state</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression" id="k.QZIcvZE)w|;7_2Y=3U" editable="false"><field name="EXPRESSION">GameState.Pairing</field></block></value></block></value><statement name="DO0"><block type="variables_set" id="kbGMVp_0a(2jz#@tjl2,"><field name="VAR" id="0IK5s9r;CAf.j5CxHAP1">patientZero</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="lists_index_get" id="dvYWr7b|%6*J5:/iDCRS"><value name="LIST"><block type="variables_get" id="KM!Z=xSsS#QAc9QtP;O#"><field name="VAR" id="u{?zlYN[BRz]?RYBnLZ/">players</field></block></value><value name="INDEX"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="device_random" id="J{jS5Bj]Q6qhFoMIoC^o"><value name="min"><shadow type="math_number" id="7Xvnvi-ct!3pQlrI,9fA"><field name="NUM">0</field></shadow></value><value name="limit"><block type="math_arithmetic" id="}[3qV8+lDUl*`NN6|8~7"><field name="OP">MINUS</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="lists_length" id="0UK6SyA*ejKn4N^JtU1F"><value name="VALUE"><block type="variables_get" id="})C#~Qbcr1S/Gx|$wZH2"><field name="VAR" id="u{?zlYN[BRz]?RYBnLZ/">players</field></block></value></block></value><value name="B"><shadow type="math_number" id="dr^?,{O:hfQ^$d-7gm8F"><field name="NUM">1</field></shadow></value></block></value></block></value></block></value><next><block type="typescript_statement" id="@vYpd$?40Ao9{LXzafWg" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="state = GameState.Infecting;" numlines="1"></mutation><next><block type="serial_writeline" id="Ck+$`Hc`rh6krs.`y**L"><value name="text"><block type="typescript_expression" id="fhjRKkusaT~RnvTs.Y^," editable="false"><field name="EXPRESSION">`game started ${players.length} players`</field></block></value></block></next></block></next></block></statement><value name="IF1"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="JA]tr!@Hv=g(LlgR~=ON"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="EZi!*M_Ojnqa?@:`U=E3"><field name="VAR" id="u)v`S+ffn`8$LuBdNN*;">state</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression" id="[/@$ai@$t.#QQz+G.=q`" editable="false"><field name="EXPRESSION">GameState.Running</field></block></value></block></value><statement name="DO1"><block type="function_call" id="hK$_KR4.~$vb%Jd7#h!`"><mutation name="gameOver" functionid="XM0l1~{qp^hlG!~8Lrge"></mutation></block></statement></block></next></block></next></block></statement></block><block type="radio_on_buffer_drag" id="/Rfn-a9XHAqJ6J7*S=qJ" x="2758" y="20"><value name="HANDLER_DRAG_PARAM_receivedBuffer"><shadow type="argument_reporter_custom" id="BI:/..|gJsVSBbp;{Wmd"><mutation typename="Buffer"></mutation><field name="VALUE">receivedBuffer</field></shadow></value><statement name="HANDLER"><block type="typescript_statement" id="5*r1(+pmhd:^j6TGsj0/" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="const incomingMessage = new Message(receivedBuffer);" numlines="1" declaredvars="incomingMessage"></mutation><next><block type="variables_set" id="zF`rE~Gnc3v.]H21!H(W"><field name="VAR" id=";Vq5^P62[5jo[H[P?b[0">signal</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="radio_received_packet" id="0*nQycdM9eS43yHU3[;7"><value name="type"><shadow type="radio_packet_property" id="ANz6PH5}lDG-NJZu74P`"><field name="note">RadioPacketProperty.SignalStrength</field></shadow></value></block></value><next><block type="controls_if" id="DCz6-;+GUBkpFk=I[sg."><mutation else="1"></mutation><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="variables_get" id="`p/h)?jl:uE5Y:P!k8#}"><field name="VAR" id="k=wMY4%fK^mu~~u}-|@[">master</field></block></value><statement name="DO0"><block type="typescript_statement" id="IKC,E=J,9klC?pdi_u{1" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (incomingMessage.kind) {" line1="            case MessageKind.PairRequest:" line2="                // register player" line3="                let n = players.length;" line4="                player(incomingMessage.fromSerialNumber);" line5="                // show player number if changed" line6="                if (n != players.length) {" line7="                    basic.showNumber(players.length);" line8="                }" line9="                break;" line10="            case MessageKind.HealthValue:" line11="                let s = player(incomingMessage.fromSerialNumber);" line12="                s.health = incomingMessage.value;" line13="                // check if all infected" line14="                if (allDead())" line15="                    gameOver();" line16="                break;" line17="        }" numlines="18"></mutation></block></statement><statement name="ELSE"><block type="typescript_statement" id="9Dn)S]+.)bJDoAo/@q2*" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (incomingMessage.kind) {" line1="            case MessageKind.GameState:" line2="                // update game state" line3="                state = incomingMessage.value as GameState;" line4="                break;" line5="            case MessageKind.InitialInfect:" line6="                if (infectedBy &lt; 0 &amp;&amp;" line7="                    incomingMessage.toSerialNumber == control.deviceSerialNumber()) {" line8="                    // infected by master" line9="                    infectedBy = 0; // infected my master" line10="                    infectedTime = input.runningTime();" line11="                    health = HealthState.Incubating;" line12="                    serial.writeLine(`infected ${control.deviceSerialNumber()}`);" line13="                }" line14="                break;" line15="            case MessageKind.HealthSet:" line16="                if (incomingMessage.toSerialNumber == control.deviceSerialNumber()) {" line17="                    const newHealth = incomingMessage.value;" line18="                    if (health &lt; newHealth) {" line19="                        health = newHealth;" line20="                    }" line21="                }" line22="                break;" line23="            case MessageKind.PairConfirmation:" line24="                if (!paired &amp;&amp; state == GameState.Pairing &amp;&amp;" line25="                    incomingMessage.toSerialNumber == control.deviceSerialNumber()) {" line26="                    // paired!" line27="                    serial.writeLine(`player paired ==&gt; ${control.deviceSerialNumber()}`)" line28="                    playerIcon = incomingMessage.value;" line29="                    paired = true;" line30="                }" line31="                break;" line32="            case MessageKind.TransmitVirus:" line33="                if (state == GameState.Running) {" line34="                    if (health == HealthState.Healthy) {" line35="                        serial.writeLine(`signal: ${signal}`);" line36="                        if (signal &gt; RSSI &amp;&amp;" line37="                            randint(0, 100) &gt; TRANSMISSIONPROB) {" line38="                            infectedBy = incomingMessage.value;" line39="                            infectedTime = input.runningTime();" line40="                            health = HealthState.Incubating;" line41="                        }" line42="                    }" line43="                }" line44="                break;" line45="            case MessageKind.HealthValue:" line46="                if (health != HealthState.Dead &amp;&amp; signal &gt; RSSI) {" line47="                    game.addScore(1);" line48="                }" line49="                break;" line50="        }" numlines="51"></mutation></block></statement></block></next></block></next></block></statement></block><block type="device_forever" id="=Lo`~A=Fi~J:;mWyWhOF" x="1745" y="102"><statement name="HANDLER"><block type="typescript_statement" id="|Yu~(X{B[6:OupmC{n$@" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let message: Message;" numlines="1" declaredvars="message"></mutation><next><block type="controls_if" id="1{+Fp7z1dSkYNg`GK|}#"><mutation else="1"></mutation><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="variables_get" id="MH,C9cWY0UMR;X)7(HBt"><field name="VAR" id="k=wMY4%fK^mu~~u}-|@[">master</field></block></value><statement name="DO0"><block type="typescript_statement" id="#-o3w?$=3s?b+y*T1[k[" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (state) {" line1="            case GameState.Pairing:" line2="                // tell each player they are registered" line3="                for (const t of players) {" line4="                    message = new Message();" line5="                    message.kind = MessageKind.PairConfirmation;" line6="                    message.value = t.icon;" line7="                    message.toSerialNumber = t.id;" line8="                    message.send();" line9="                }" line10="                serial.writeLine(`pairing ${players.length} players`);" line11="                basic.pause(500);" line12="                break;" line13="            case GameState.Infecting:" line14="                if (patientZero.health == HealthState.Healthy) {" line15="                    message = new Message();" line16="                    message.kind = MessageKind.InitialInfect;" line17="                    message.toSerialNumber = patientZero.id;" line18="                    message.send();" line19="                    basic.pause(100);" line20="                } else {" line21="                    serial.writeLine(`patient ${patientZero.id} infected`);" line22="                    // show startup" line23="                    basic.showIcon(GameIcons.Dead);" line24="                    state = GameState.Running;" line25="                }" line26="                break;" line27="            case GameState.Running:" line28="                for (const u of players) {" line29="                    message = new Message();" line30="                    message.kind = MessageKind.HealthSet;" line31="                    message.value = u.health;" line32="                    message.toSerialNumber = u.id;" line33="                    message.send();" line34="                }" line35="                break;" line36="            case GameState.Over:" line37="                if (patientZero)" line38="                    patientZero.show();" line39="                break;" line40="        }" numlines="41"></mutation><next><block type="typescript_statement" id="VxUB|O%:9^d(g{BkNb+U" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="message = new Message()" numlines="1"></mutation><next><block type="typescript_statement" id="UKA;W!hNK2IMz~Ag#-Km" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="message.kind = MessageKind.GameState;" numlines="1"></mutation><next><block type="typescript_statement" id="!|9QdlhH!]JWC1*9~gq`" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="message.value = state;" numlines="1"></mutation><next><block type="typescript_statement" id="fU_T?WC;`iSyTVgOb:7$" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="message.send();" numlines="1"></mutation></block></next></block></next></block></next></block></next></block></statement><statement name="ELSE"><block type="typescript_statement" id="d?#.D;rX2}QPHA7$V?BQ" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (state) {" line1="            case GameState.Pairing:" line2="                // broadcast player id" line3="                if (playerIcon &lt; 0) {" line4="                    message = new Message();" line5="                    message.kind = MessageKind.PairRequest;" line6="                    message.fromSerialNumber = control.deviceSerialNumber();" line7="                    message.send();" line8="                } else if (infectedBy &gt; -1) {" line9="                    message = new Message();" line10="                    message.kind = MessageKind.HealthValue;" line11="                    message.fromSerialNumber = control.deviceSerialNumber();" line12="                    message.value = health;" line13="                    message.send();" line14="                }" line15="                break;" line16="            case GameState.Infecting:" line17="                message = new Message();" line18="                message.kind = MessageKind.HealthValue;" line19="                message.fromSerialNumber = control.deviceSerialNumber();" line20="                message.value = health;" line21="                message.send();" line22="                break;" line23="            case GameState.Running:" line24="                // update health status" line25="                if (health != HealthState.Healthy &amp;&amp; input.runningTime() - infectedTime &gt; DEATH)" line26="                    health = HealthState.Dead;" line27="                else if (health != HealthState.Healthy &amp;&amp; input.runningTime() - infectedTime &gt; INCUBATION)" line28="                    health = HealthState.Sick;" line29="                // transmit disease" line30="                if (health == HealthState.Incubating || health == HealthState.Sick) {" line31="                    message = new Message();" line32="                    message.kind = MessageKind.TransmitVirus;" line33="                    message.fromSerialNumber = control.deviceSerialNumber();" line34="                    message.value = playerIcon;" line35="                    message.send();" line36="                }" line37="                message = new Message();" line38="                message.kind = MessageKind.HealthValue;" line39="                message.fromSerialNumber = control.deviceSerialNumber();" line40="                message.value = health;" line41="                message.send();" line42="                break;" line43="        }" numlines="44"></mutation><next><block type="function_call" id="2uX-*{Q.?H.Q*L7QZHrx"><mutation name="gameFace" functionid="#FgfAkwPb:Zx~rp(IywZ"></mutation></block></next></block></statement></block></next></block></statement></block><block type="function_definition" id="Tb@Bt$cv|2[TAk~vvRLD" x="3634" y="20"><mutation name="player" functionid="e15%tc*s!*9;R^dCx#Rv"><arg name="id" id="2jy79n1aodqeb81nczlh" type="number"></arg></mutation><field name="function_name">player</field><comment pinned="false" h="80" w="160">get a player instance (creates one as needed)</comment><statement name="STACK"><block type="pxt_controls_for_of" id="7`;4[}.I@6H3?(0+zy:d"><value name="VAR"><shadow type="variables_get_reporter" id="b2W6u`])th|E}fF)sw+9"><field name="VAR" id=",@9N%JNVI@R,LmtsliTi">p</field></shadow></value><value name="LIST"><block type="variables_get" id="_ti+TM*M;na,hu0Yr)YD"><field name="VAR" id="u{?zlYN[BRz]?RYBnLZ/">players</field></block></value><statement name="DO"><block type="controls_if" id="pXc,L0r`xzo2z)JQvbx/"><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="`eof[eRKcj(nmQMK5RSA"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression" id="5$,|8@:6Q7tliXA:6c%?" editable="false"><field name="EXPRESSION">p.id</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="argument_reporter_number" id="+`xG,9,R?wtwbezX7g-A"><field name="VALUE">id</field></block></value></block></value><statement name="DO0"><block type="function_return" id="wY2/4Iq-8:(:aDTrXZlz"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="-~TPsbo9Q#%rgvlrx$ws"><field name="VAR" id=",@9N%JNVI@R,LmtsliTi">p</field></block></value></block></statement></block></statement><next><block type="typescript_statement" id="ljep8^YI~p/GN6ig4Dy(" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let q = new Player();" numlines="1" declaredvars="q"></mutation><next><block type="typescript_statement" id="4sQQC9e6zL+Z#M/R$BD^" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="q.id = id;" numlines="1"></mutation><next><block type="typescript_statement" id="a`A)sFpy,`[Eoi-0bDF8" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="q.icon = (players.length + 1) % playerIcons.length;" numlines="1"></mutation><next><block type="typescript_statement" id="pNX/=J5ah5nd)CKA$s;^" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="q.health = HealthState.Healthy;" numlines="1"></mutation><next><block type="array_push" id="]rdG_{wJ7c[Csbow4TV6"><value name="list"><block type="variables_get" id="W(;oq{$3yV,rLDv;o^|I"><field name="VAR" id="u{?zlYN[BRz]?RYBnLZ/">players</field></block></value><value name="value"><block type="variables_get" id="I+m(0Y|,`LDGu%+p=.;L"><field name="VAR" id="45}TZ_.X;Z3]#!#zIy^C">q</field></block></value><next><block type="serial_writeline" id="1XW]swSb}2aqxz@CVbN."><value name="text"><block type="typescript_expression" id="_S-HW6N0|;Jd22)SQKQg" editable="false"><field name="EXPRESSION">`player ==&gt; ${q.id}`</field></block></value><next><block type="function_return" id="uXWj=t$Fps*JE9HWVbMY"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="+DQJNt?nWw1m9#_ql49."><field name="VAR" id="45}TZ_.X;Z3]#!#zIy^C">q</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="function_definition" id="=e/j$D~E#]Br6G{Y}hA!" x="4160" y="20"><mutation name="allDead" functionid="PU6Jz4c7~u:0Yl*;QRw]"></mutation><field name="function_name">allDead</field><statement name="STACK"><block type="pxt_controls_for_of" id="6AU]]O66Ona]U7?F1DFp"><value name="VAR"><shadow type="variables_get_reporter" id="xFizww5,fk^E0l~)G27d"><field name="VAR" id="nwEV*OO3ROC(+(PofQwM">r</field></shadow></value><value name="LIST"><block type="variables_get" id="/9~vz_`T?jE+YfIyttAM"><field name="VAR" id="u{?zlYN[BRz]?RYBnLZ/">players</field></block></value><statement name="DO"><block type="controls_if" id="=}_o+b;2S*tN[*ZKXprx"><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="3@c`M%n!z~bqz-_(`8vN"><field name="OP">NEQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression" id="Iw6DG`+U_E6uayLQ$.OR" editable="false"><field name="EXPRESSION">r.health</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression" id="FlivB93oJN/K8O=@_+UW" editable="false"><field name="EXPRESSION">HealthState.Dead</field></block></value></block></value><statement name="DO0"><block type="function_return" id="Z6x.V?(C*J$V+*L.v{h!"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean" id="@|`eqS{^Y;!lt5F3oqR{"><field name="BOOL">FALSE</field></block></value></block></statement></block></statement><next><block type="function_return" id="fwl{6R:t!+GZ.EVuF)H-"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean" id="7tM,gB!D#!j7H5q5@.kO"><field name="BOOL">TRUE</field></block></value></block></next></block></statement></block><block type="function_definition" id="=m*4sV8[ixFW0#=Xcpgy" x="4718" y="20"><mutation name="gameOver" functionid="XM0l1~{qp^hlG!~8Lrge"></mutation><field name="function_name">gameOver</field><statement name="STACK"><block type="typescript_statement" id="COvnjqyMP.(M2gu!Fw$g" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="state = GameState.Over;" numlines="1"></mutation><next><block type="controls_if" id="9q035~}.kEpqmd2W.mpd"><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="variables_get" id="R3^uLuU+~OphYS0B@o[Y"><field name="VAR" id="0IK5s9r;CAf.j5CxHAP1">patientZero</field></block></value><statement name="DO0"><block type="typescript_statement" id="wB8jp%E]@2O%bYFuDd{D" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="patientZero.show();" numlines="1"></mutation></block></statement></block></next></block></statement></block><block type="function_definition" id="05p6+ZICth,~0%k_F@(h" x="5018" y="20"><mutation name="gameFace" functionid="#FgfAkwPb:Zx~rp(IywZ"></mutation><field name="function_name">gameFace</field><statement name="STACK"><block type="typescript_statement" id="uxWTo:/|}-v?Ydzhl$DW" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (state) {" line1="        case GameState.Stopped:" line2="            basic.showIcon(GameIcons.Pairing);" line3="            break;" line4="        case GameState.Pairing:" line5="            if (playerIcon &gt; -1)" line6="                basic.showString(playerIcons[playerIcon]);" line7="            else" line8="                basic.showIcon(paired ? GameIcons.Paired : GameIcons.Pairing, 1);" line9="            break;" line10="        case GameState.Infecting:" line11="        case GameState.Running:" line12="            switch (health) {" line13="                case HealthState.Dead:" line14="                    basic.showIcon(GameIcons.Dead, 1);" line15="                    break;" line16="                case HealthState.Sick:" line17="                    basic.showIcon(GameIcons.Sick, 1);" line18="                    break;" line19="                default:" line20="                    basic.showIcon(GameIcons.Healthy, 1);" line21="                    break;" line22="            }" line23="            break;" line24="        case GameState.Over:" line25="            // show id" line26="            basic.showString(playerIcons[playerIcon]);" line27="            basic.pause(2000);" line28="            // show health" line29="            switch (health) {" line30="                case HealthState.Dead:" line31="                    basic.showIcon(GameIcons.Dead, 2000);" line32="                    break;" line33="                case HealthState.Sick:" line34="                    basic.showIcon(GameIcons.Sick, 2000);" line35="                    break;" line36="                case HealthState.Incubating:" line37="                    basic.showIcon(GameIcons.Incubating, 2000);" line38="                    break;" line39="                default:" line40="                    basic.showIcon(GameIcons.Healthy, 2000);" line41="                    break;" line42="            }" line43="            // show how infected" line44="            if (infectedBy &gt; -1) {" line45="                basic.showString(&quot; INFECTED BY&quot;);" line46="                basic.showString(playerIcons[infectedBy]);" line47="                basic.pause(2000);" line48="            } else {" line49="                basic.showString(&quot; PATIENT ZERO&quot;);" line50="                basic.pause(2000);" line51="            }" line52="            // show score" line53="            game.showScore();" line54="            basic.pause(1000);" line55="            break;" line56="    }" numlines="57"></mutation></block></statement></block></xml>